#compdef xmms2

# Sub-command completion functions

_xmms2-add () {
    __xmms2_completion_niy $0
}

_xmms2-current () {
    __xmms2_completion_niy $0
}

_xmms2-exit () {
    _nothing
}

_xmms2-help () {
    if (( CURRENT == 2 )); then
        __xmms2_commands
    elif ((CURRENT == 3 )) &&
         [[ "${words[2]}" == (collection|playlist|server) ]]
    then
        __xmms2_"${words[2]}"_subcommands
    fi
}

_xmms2-info () {
    __xmms2_completion_niy $0
}

_xmms2-jump () {
    __xmms2_completion_niy $0
}

_xmms2-list () {
    __xmms2_completion_niy $0
}

_xmms2-move () {
    __xmms2_completion_niy $0
}

_xmms2-next () {
    __xmms2_completion_niy $0
}

_xmms2-pause () {
    __xmms2_completion_niy $0
}

_xmms2-play () {
    _nothing
}

_xmms2-prev () {
    __xmms2_completion_niy $0
}

_xmms2-remove () {
    __xmms2_completion_niy $0
}

_xmms2-stop () {
    _nothing
}

_xmms2-search () {
    __xmms2_completion_niy $0
}

_xmms2-seek () {
    __xmms2_completion_niy $0
}

_xmms2-toggle () {
    __xmms2_completion_niy $0
}

_xmms2-collection () {
    if (( CURRENT == 2 )); then
        __xmms2_collection_subcommands
    fi
}

_xmms2-playlist () {
    if (( CURRENT == 2 )); then
        __xmms2_playlist_subcommands
    fi
}

_xmms2-server () {
    if (( CURRENT == 2 )); then
        __xmms2_server_subcommands
    fi
}

# Helper functions follow

__xmms2_completion_niy () {
    _message "Subcommand completion for \`${1#_xmms2-}' not implemented yet"
}

__xmms2_commands () {
    local -a _xmms2_commands

    _xmms2_commands=(
        'add:Add the matching media or files to a playlist'
        'current:Display current playback status, either continuously or once'
        'exit:Exit the shell-like interface'
        'help:List commands or provide detailed help about a command'
        'info:Display all the properties for all media matching the pattern'
        'jump:Jump to the first media matching the pattern'
        'list:List the contents of a playlist (the active playlist by default)'
        'move:Move entries inside a playlist'
        'next:Jump to next song'
        'pause:Pause playback'
        'play:Start playback'
        'prev:Jump to previous song'
        'remove:Remove the matching media from a playlist'
        'stop:Stop playback'
        'search:Search and print all media matching the pattern'
        'seek:Seek to a relative or absolute position'
        'toggle:Toggle playback'
        'collection:Manipulate server-side collections'
        'playlist:Manipulate server-side playlists'
        'server:Manipulate server-specific settings'
    )
    _describe -t subcommands 'xmms2 commands' _xmms2_commands
}

__xmms2_collection_subcommands () {
    local -a _xmms2_collection_subommands

    _xmms2_collection_subommands=(
        'config:Get or set attributes for the given collection'
        'create:Create a new collection'
        'list:List all collections'
        'remove:Remove a collection'
        'rename:Rename a collection'
        'show:Display a human-readable description of a collection'
    )
    _describe -t subcommands 'xmms2 collection subcommands' \
        _xmms2_collection_subommands
}

__xmms2_playlist_subcommands () {
    local -a _xmms2_playlist_subommands

    _xmms2_playlist_subommands=(
        'clear:Clear a playlist'
        'config:Configure a playlist by changing its type, attributes, etc'
        'create:Create a new playlist'
        'list:List all playlists'
        'remove:Remove the given playlist'
        'rename:Rename a playlist'
        'shuffle:Shuffle a playlist'
        'sort:Sort a playlist by a list of properties'
        'switch:Change the active playlist'
    )
    _describe -t subcommands 'xmms2 playlist subcommands' \
        _xmms2_playlist_subommands
}

__xmms2_server_subcommands () {
    local -a _xmms2_server_subommands

    _xmms2_server_subommands=(
        'browse:Browse a resource location'
        'config:Get or set configuration values'
        'import:Import new files into the media library'
        'plugins:List the plugins loaded in the server'
        'property:Get or set properties for a given media'
        'rehash:Rehash the media matched by the pattern or the while library'
        'remove:Remove the matching media from the media library'
        'shutdown:Shutdown the server'
        'stats:Display statistics about the server'
        'sync:Force the saving of collections to the disk'
        'volume:Get or set the audio volume (in a range of 0-100)'
    )
    _describe -t subcommands 'xmms2 server subcommands' \
        _xmms2_server_subommands
}

# Main XMMS2 completion

_xmms2 () {
    local curcontext="${curcontext}"
    local state ret xmms2cmd
    local -a args

    args=(
        '(--help -h)'{--help,-h}'[display help information]:'
        '(--version -v)'{--version,-v}'[display version information]:'
        '*:: :->subcommand_or_options'
    )
    _arguments -C ${args} && return

    if [[ $state == subcommand_or_options ]]; then
        if (( CURRENT == 1 )); then
            __xmms2_commands
        else
            if (( ${+commands[xmms2]} == 0 )); then
                _message '`xmms2'\'' not found in $path; sub-cmd completions disabled.'
                return 0
            fi
            xmms2cmd="${words[1]}"
            if ! (( ${+functions[_xmms2-$xmms2cmd]} )); then
                _message "Subcommand $xmms2cmd not known"
                return 0
            fi
            curcontext="${curcontext%:*:*}:xmms2-${xmms2cmd}:"
            _call_function ret _xmms2-${xmms2cmd}
        fi
    fi
}

_xmms2 "$@"
